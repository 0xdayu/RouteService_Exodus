import sys
sys.path.append('./gen-py')
 
from route import RouteService 
from route.ttypes import *

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer
 
import socket

class RouteServiceHandler:
    def __init__(self):
        '''
        linkState describes the topology of this network:
        (srcswid, dstswid) -> (srcport, dstport, cost)
        '''
        self.linkState = {}
        '''
        routerList describes all routers' information:
        (swid) -> (port -> subnet)
        ''' 
        self.switchList = {}
        '''
        all path generated by floyd_warshall algorithm
        (src, dst) -> list(hops)
        '''
        self.routePath = {}
        self.log = {}

    def notifyMe(self, notify):
        print "Link State Notification Received!"
        print notify
        '''
        Update LinkState Table
        '''
        if notify.notificationType == "LINKSTATE":
            if len(notify.values) != 5:
                print "Invalid Notification!"
                return
        
            srcsw = notify.values['srcsw']
            dstsw = notify.values['dstsw']
            srcpt = notify.values['srcpt']
            dstpt = notify.values['dstpt']
            cost = int(notify.values['cost'])

            # avoid self loop
            if srcsw == dstsw:
                return

            # Two switch connect with two different cables, pick the less cost one
            if (srcsw, dstsw) in self.linkState.keys():
                (oldSrcPt, oldDstPt, oldCost) = self.linkState[(srcsw,dstsw)]
                if oldCost > cost:
                    self.linkState[(srcsw,dstsw)] = (srcpt, dstpt, cost)
            else:
                    self.linkState[(srcsw,dstsw)] = (srcpt, dstpt, cost)
 
        '''
        Update switchList
        '''                
        if notify.notificationType == "SWITCH_CONFIG":
            if len(notify.values) != 4:
                print "Invalid Notification!"
                return
            
            swid = notify.values['swid']
            ptid = notify.values['ptid']
            prefix = notify.values['prefix']
            mask = notify.values['mask']


            if swid not in self.switchList.keys():
                self.switchList[swid] = {}
            
            self.switchList[swid][ptid] = (prefix, mask) 
    
        print "************************"
        self.printLinkState()
        print "---------------------"
        self.printSwitchConfig()

    def doQuery(self, r):
        self.initMatrix()
        self.floyd_warshall()
        self.generateAllPath()
        print "++++++++++++++++"
        self.printAllPath()
        return QueryReply()
        
    
    def initMatrix(self):
        #inital dist matrix with all infinity
        self.dist = {}
        for i in self.switchList.keys():
            self.dist[i] = {}
            for j in self.switchList.keys():
                self.dist[i][j] = float("inf")
        
        #initial next matrixt with all none
        self.nexthop = {}
        for i in self.switchList.keys():
            self.nexthop[i] = {}
            for j in self.switchList.keys():
                self.nexthop[i][j] = None
            
        #Fill the dist matrix and next matrix with value
        for key, item in self.linkState.iteritems():
            srcsw, dstsw = key
            srcpt, dstpt, cost = item
            self.dist[srcsw][dstsw] = cost
            self.nexthop[srcsw][dstsw] = dstsw

    def floyd_warshall(self):
        for k in self.switchList.keys(): 
            for i in self.switchList.keys():
                for j in self.switchList.keys():
                    if self.dist[i][k] + self.dist[k][j] < self.dist[i][j]:
                        self.dist[i][j] = self.dist[i][k] + self.dist[k][j]
                        self.nexthop[i][j] = self.nexthop[i][k]
    def path(self, src, dst):
        result = []
        if self.nexthop[src][dst] is None:
            return result
        while src != dst:
            src = self.nexthop[src][dst]
            result.append(src)
        return result
 
    def generateAllPath(self):
        for i in self.switchList.keys():
            for j in self.switchList.keys():
                self.routePath[i,j] = self.path(i,j)

    def printLinkState(self):
        print self.linkState

    def printSwitchConfig(self):
        print self.switchList

    def printAllPath(self):
        for key, item in self.routePath.iteritems():
            print "%s : %s" % key, item

handler = RouteServiceHandler()
processor = RouteService.Processor(handler)
transport = TSocket.TServerSocket("192.168.1.103", port = 9090)
tfactory = TTransport.TBufferedTransportFactory()
pfactory = TBinaryProtocol.TBinaryProtocolFactory()

server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)
 
print "Starting thrift server in python..."
server.serve()
print "done!"
